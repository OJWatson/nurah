% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/simulate.R
\name{simulate_crisis_data}
\alias{simulate_crisis_data}
\title{Simulate Crisis Data Based on a DAG Model}
\usage{
simulate_crisis_data(
  dag = NULL,
  start_date,
  end_date = NULL,
  n_periods = NULL,
  resolution = "month",
  spatial_structure = 1,
  initial_population = 10000,
  noise_level = 1
)
}
\arguments{
\item{dag}{A DAG object of class \code{nurah_dag} defining the nodes (indicators)
and their relationships. Typically created by \code{define_dag()} or a specific
DAG constructor (e.g., \code{checchi_2017_dag()}). If \code{NULL}, a default DAG
will be used (if available).}

\item{start_date}{Start date of the simulation (as a \code{Date} or string in
"YYYY-MM-DD" format).}

\item{end_date}{End date of the simulation (as a \code{Date} or string). Either
\code{end_date} or \code{n_periods} must be provided (but not both).}

\item{n_periods}{Number of time periods to simulate at the specified output
resolution (ignored if \code{end_date} is provided).}

\item{resolution}{Time resolution for the output data. One of \code{"day"},
\code{"week"}, \code{"month"}, \code{"quarter"}, or \code{"year"}. Defaults to
\code{"month"}.}

\item{spatial_structure}{Specification of the spatial layout (regions and optional
hierarchy). Can be:
\itemize{
\item A data frame with one row per lowest-level region (and optional higher
level columns for hierarchy).
\item A named numeric vector defining counts at each hierarchy level (top to
bottom). For example, \code{c(country = 1, region = 2, district = 4)}
means 1 country, 2 regions total, 4 districts total (distributed as
evenly as possible under the regions).
\item A single numeric value (number of lowest-level regions; one top-level
grouping will be added if >1 region is implied).
\item A character vector of region names (defining the lowest level; one
top-level grouping will be added since no higher levels are specified).
}
Defaults to \code{1} (a single region with one top-level grouping if needed).}

\item{initial_population}{Initial population at the start date for each lowest-level
region. Can be a single number (applied to all regions) or a vector. If a vector,
it can be:
\itemize{
\item A named vector, where names correspond to region identifiers (at the
lowest level).
\item An unnamed vector with length equal to the number of lowest-level
regions (in the same order as the regions in the spatial structure).
}
Defaults to 10000 for all regions.}

\item{noise_level}{Numeric factor to scale stochastic noise in node simulations.
\code{noise_level = 0} produces fully deterministic output, while \code{noise_level = 1}
uses the full specified randomness. Defaults to 1.}
}
\value{
A data frame of simulated indicators aggregated at the requested time
resolution. It contains one row per region per period, with a \code{date} column
indicating the period start date, and columns for each simulated indicator (node)
as well as \code{population}.
}
\description{
Generates a synthetic crisis dataset over time and across regions, using a
directed acyclic graph (DAG) of relationships between indicators. This high-level
function orchestrates the simulation by setting up time and space dimensions,
simulating each indicator (node) in the DAG, handling dynamic population changes
due to IDP flows, and aggregating results to the desired time resolution.
}
\details{
This function performs the following steps:
\enumerate{
\item Validates the temporal inputs and generates a daily date sequence and an
output period sequence using \code{setup_temporal_structure()}.
\item Prepares the spatial structure (region hierarchy and names) using
\code{setup_spatial_structure()}.
\item Initializes a daily data frame with one row per region per day.
\item Determines the simulation order of nodes using
\code{topological_sort_dag()} (ensuring that parent nodes are simulated
before their children).
\item Simulates each non-population node's daily values in order using
\code{simulate_node()}, and adds them as new columns to the daily data.
\item Simulates dynamic population changes (if a population node is defined)
using \code{simulate_population_dynamics()}, updating the population column
based on IDP inflows/outflows and initial populations.
\item Aggregates the daily data to the specified output resolution using
\code{aggregate_simulated_data()}.
}

The \code{nurah_dag} object provides the structural relationships between nodes.
Each directed edge in \code{dag$parameters} has an \code{effect_size} and an optional
\code{lag} (in days). For each node, if no explicit formula is provided, the expected
value is computed as the sum of its parent values (lagged by the specified \code{lag})
each multiplied by its \code{effect_size}. Nodes with no parents default to a baseline
of 0 (unless a specific baseline or distribution is defined). If the DAG includes a
"population" node, that node's value is simulated via dynamic population flows rather
than the static DAG relationships.
}
\examples{
# Define a simple DAG: A -> B -> C
nodes <- c("A", "B", "C")
edges <- data.frame(from = c("A", "B"), to = c("B", "C"))
parameters <- data.frame(from = c("A", "B"), to = c("B", "C"),
                         effect_size = c(1.0, 1.0), lag = c(0, 0))
dag <- define_dag(nodes, edges, parameters)
sim_data <- simulate_crisis_data(dag, start_date = "2020-01-01", n_periods = 2,
                                 resolution = "month", spatial_structure = paste0("region", 1:2),
                                 initial_population = 10000, noise_level = 0.5)
head(sim_data)

# Using a built-in DAG (e.g., Checchi et al. 2017 model) if available:
# sim_data <- simulate_crisis_data(checchi_2017_dag(parameters = params),
#                                  start_date = "2020-01-01", n_periods = 6, resolution = "month")
}
